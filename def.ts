/*
 Generated by typeshare 1.0.0
*/

export interface FlowData {
	flow: FlowInfo;
	response_error?: SubmissionError;
	pending_user?: PendingUser;
	component: FlowComponent;
}

export interface Sources {
	sources: Source[];
	show_source_labels: boolean;
}

export interface PendingUser {
	name: string;
	avatar_url: string;
}

export interface Source {
	name: string;
	icon_url: string;
}

export interface FlowInfo {
	title: string;
}

export interface Flow {
	uid: number;
	slug: string;
	title: string;
	designation: FlowDesignation;
	authentication: AuthenticationRequirement;
	bindings: FlowBinding[];
	entries: FlowEntry[];
}

export interface FlowBinding {
	enabled: boolean;
	negate: boolean;
	order: number;
	kind: FlowBindingKind;
}

export interface FlowEntry {
	ordering: number;
	bindings: FlowBinding[];
	stage: Reference<Stage>;
}

export interface Policy {
	uid: number;
	slug: string;
	kind: PolicyKind;
}

export interface PromptBinding {
	order: number;
	prompt: Reference<Prompt>;
}

export interface Prompt {
	uid: number;
	field_key: string;
	label: string;
	kind: PromptKind;
	placeholder?: string;
	required: boolean;
	help_text?: string;
}

export interface Reference<Target> {
	id: ReferenceId;
}

export interface Stage {
	uid: number;
	slug: string;
	kind: StageKind;
	timeout: number;
}

export type FlowComponent = 
	| { type: "access-denied", component: {
	message: string;
}}
	| { type: "identification", component: {
	user_fields: UserField[];
	sources: Sources;
}}
	| { type: "password", component: {
	recovery_url: string;
}}
	| { type: "redirect", component: {
	to: string;
}}
	| { type: "error", component: {
	message: string;
}};

export enum FieldType {
	Null = "null",
	Boolean = "boolean",
	String = "string",
	Number = "number",
	Object = "object",
	Array = "array",
}

export type SubmissionError = 
	| { type: "missing_field", error: {
	field_name: string;
}}
	| { type: "invalid_field_type", error: {
	field_name: string;
	expected: FieldType;
	got: FieldType;
}}
	| { type: "no_pending_user", error?: undefined }
	| { type: "field", error: FieldError }
	| { type: "unauthenticated", error?: undefined };

export type FieldError = 
	| { type: "invalid", error: {
	field: string;
	message: string;
}};

export enum AuthenticationRequirement {
	Superuser = "superuser",
	Required = "required",
	None = "none",
	Ignored = "ignored",
}

export enum FlowDesignation {
	Authentication = "authentication",
}

export type FlowBindingKind = 
	| { kind: "group", ref: Uuid }
	| { kind: "user", ref: Uuid }
	| { kind: "policy", ref: Reference<Policy> };

export type PolicyKind = 
	| { type: "password_expiry", policy: {
	max_age: number;
}}
	| { type: "password_strength", policy?: undefined }
	| { type: "expression", policy?: undefined };

export enum PromptKind {
	Username = "username",
	Email = "email",
	Password = "password",
	Text = "text",
	TextReadOnly = "text_read_only",
	SignedNumber = "signed_number",
	UnsignedNumber = "unsigned_number",
	Checkbox = "checkbox",
	Switch = "switch",
	Date = "date",
	DateTime = "date_time",
	Seperator = "seperator",
	Static = "static",
	Locale = "locale",
}

export type ReferenceId = 
	| { kind: "slug", id: string }
	| { kind: "uid", id: number };

export enum PasswordBackend {
	Internal = "internal",
	LDAP = "ldap",
}

export enum UserField {
	Email = "email",
	Name = "name",
	Uuid = "uuid",
}

export type StageKind = 
	| { kind: "Deny", data?: undefined }
	| { kind: "Prompt", data: {
	bindings: PromptBinding[];
}}
	| { kind: "Identification", data: {
	password?: Reference<Stage>;
	user_fields: UserField[];
}}
	| { kind: "UserLogin", data?: undefined }
	| { kind: "UserLogout", data?: undefined }
	| { kind: "UserWrite", data?: undefined }
	| { kind: "Password", data: {
	backends: PasswordBackend[];
}}
	| { kind: "Consent", data: {
	mode: ConsentMode;
}};

export type ConsentMode = 
	| { type: "always", mode?: undefined }
	| { type: "once", mode?: undefined }
	| { type: "until", mode: {
	duration: number;
}};

