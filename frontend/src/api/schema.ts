/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/api/v1/flow/executor/{flow-slug}": {
    /** Get Flow */
    get: operations["get-flow"];
    /** Post Flow */
    post: operations["post-flow"];
  };
  "/api/v1/auth": {
    /** Check Auth */
    get: operations["check-auth"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    readonly FlowData: components["schemas"]["flow-data"];
    readonly PartialUser: components["schemas"]["partial-user"];
    /** @enum {string} */
    readonly FieldType: "null" | "boolean" | "string" | "number" | "object" | "array";
    readonly Source: {
      readonly icon_url: string;
      readonly name: string;
    };
    /** @enum {string} */
    readonly UserField: "email" | "name" | "uuid";
    readonly FlowInfo: {
      readonly title: string;
    };
    readonly PendingUser: {
      readonly avatar_url: string;
      readonly name: string;
    };
    readonly SubmissionError: OneOf<[{
      readonly field_name: string;
      /** @enum {string} */
      readonly type: "missing_field";
    }, {
      readonly expected: components["schemas"]["FieldType"];
      readonly field_name: string;
      readonly got: components["schemas"]["FieldType"];
      /** @enum {string} */
      readonly type: "invalid_field_type";
    }, {
      /** @enum {string} */
      readonly type: "no_pending_user";
    }, {
      readonly field: string;
      readonly message: string;
      /** @enum {string} */
      readonly type: "invalid";
    }, {
      /** @enum {string} */
      readonly type: "unauthenticated";
    }]>;
    /** FlowData */
    readonly "flow-data": OneOf<[{
      /** @enum {string} */
      readonly component: "access_denied";
      readonly message: string;
    }, {
      /** @enum {string} */
      readonly component: "identification";
      readonly show_source_labels: boolean;
      readonly sources: readonly (components["schemas"]["Source"])[];
      readonly user_fields: readonly (components["schemas"]["UserField"])[];
    }, {
      /** @enum {string} */
      readonly component: "password";
      readonly recovery_url: string;
    }, {
      /** @enum {string} */
      readonly component: "redirect";
      readonly to: string;
    }, {
      /** @enum {string} */
      readonly component: "error";
      readonly message: string;
    }]>;
    /** PartialUser */
    readonly "partial-user": {
      readonly icon_url?: OneOf<[string, null]>;
      readonly name: string;
      /** Format: uuid */
      readonly uid: string;
    };
  };
  responses: never;
  parameters: {
    readonly FlowSlug: string;
    readonly Query: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  "get-flow": {
    /** Get Flow */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "application/json": components["schemas"]["flow-data"];
        };
      };
    };
  };
  "post-flow": {
    /** Post Flow */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "application/json": components["schemas"]["flow-data"];
        };
      };
    };
  };
  "check-auth": {
    /** Check Auth */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "application/json": components["schemas"]["partial-user"];
        };
      };
      /** @description Unauthorized */
      401: never;
    };
  };
}
